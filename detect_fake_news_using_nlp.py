# -*- coding: utf-8 -*-
"""Detect fake news using NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T6PZfBa8Apk99BxzdnTFcKjWmW9STWLO
"""

import numpy as np
import pandas as pd
import seaborn as sns

df=pd.read_csv('fake_or_real_news.csv.zip')

df

df.isna().sum()

df.label.value_counts()

df.replace({'label':{'REAL':0,'FAKE':1}}, inplace=True)

sns.countplot(df.label)
plt.title('the number of news fake/real');

import nltk
nltk.download('stopwords')

import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

stop_word=stopwords.words('english')
stop_word

corpus = []
ps = PorterStemmer()
for i in range(len(df)):
    review = re.sub('[^a-zA-Z]', ' ', df['text'][i])
    review = review.lower()
    review = review.split()
    
    review = [ps.stem(word) for word in review if word not in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)

corpus

from wordcloud import WordCloud

wordcloud = WordCloud(width = 800, height = 800, 
                background_color ='black', 
                stopwords = stopwords.words('english'), 
                min_font_size = 10).generate(" ".join(df[df['label'] == 0].text)) 
  
                      
plt.figure(figsize = (8, 8), facecolor = None) 
plt.imshow(wordcloud) 
plt.axis("off") 
plt.tight_layout(pad = 0) 
plt.show()

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000, ngram_range = (1,3))
x = cv.fit_transform(corpus)

from sklearn.feature_extraction.text import TfidfTransformer

tfidf=TfidfTransformer(norm="l2")
tfidf.fit(x)
tf_idf_matrix=tfidf.fit_transform(x)

tf_idf_matrix

x

y=df['label']

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(tf_idf_matrix,y,random_state=0)

from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

pac=PassiveAggressiveClassifier(max_iter=50)
pac.fit(x_train,y_train)
y_pred=pac.predict(x_test)

from sklearn import metrics
metrics.accuracy_score(y_test, y_pred)

cm = metrics.confusion_matrix(y_test, y_pred)
cm

sns.heatmap(cm,annot=True)

